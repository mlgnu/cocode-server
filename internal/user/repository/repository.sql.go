// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: repository.sql

package userrepo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const changePassword = `-- name: ChangePassword :exec
UPDATE "user" SET "password" = $1 WHERE "id" = $2
`

type ChangePasswordParams struct {
	Password string `json:"password"`
	ID       int32  `json:"id"`
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) error {
	_, err := q.db.Exec(ctx, changePassword, arg.Password, arg.ID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user" WHERE "id" = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, first_name, last_name, avatar, role, is_active, created_at, updated_at FROM "user"
WHERE "id" = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user" SET "email" = $1, "password" = $2, "first_name" = $3, "last_name" = $4, "avatar" = $5 WHERE "id" = $6 RETURNING email, first_name, last_name, avatar, role, is_active, created_at, updated_at
`

type UpdateUserParams struct {
	Email     string      `json:"email"`
	Password  string      `json:"password"`
	FirstName string      `json:"first_name"`
	LastName  string      `json:"last_name"`
	Avatar    pgtype.Text `json:"avatar"`
	ID        int32       `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Avatar,
		arg.ID,
	)
	return err
}
