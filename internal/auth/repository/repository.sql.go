// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: repository.sql

package authrepo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUser = `-- name: AddUser :one
INSERT INTO "user" ("email", "password", "first_name", "last_name") VALUES ($1, $2, $3, $4) RETURNING email, first_name, last_name
`

type AddUserParams struct {
	Email     string `json:"email"`
	Password  string `json:"password"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

type AddUserRow struct {
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (AddUserRow, error) {
	row := q.db.QueryRow(ctx, addUser,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
	)
	var i AddUserRow
	err := row.Scan(&i.Email, &i.FirstName, &i.LastName)
	return i, err
}

const getUserAuth = `-- name: GetUserAuth :one
SELECT id, email, password, role, is_active FROM "user" WHERE "email" = $1
`

type GetUserAuthRow struct {
	ID       int32       `json:"id"`
	Email    string      `json:"email"`
	Password string      `json:"password"`
	Role     Roles       `json:"role"`
	IsActive pgtype.Bool `json:"is_active"`
}

func (q *Queries) GetUserAuth(ctx context.Context, email string) (GetUserAuthRow, error) {
	row := q.db.QueryRow(ctx, getUserAuth, email)
	var i GetUserAuthRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT email, first_name, last_name, avatar, role, is_active, created_at, updated_at FROM "user" WHERE "email" = $1
`

type GetUserByEmailRow struct {
	Email     string           `json:"email"`
	FirstName string           `json:"first_name"`
	LastName  string           `json:"last_name"`
	Avatar    pgtype.Text      `json:"avatar"`
	Role      Roles            `json:"role"`
	IsActive  pgtype.Bool      `json:"is_active"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT email, first_name, last_name, avatar, role, is_active, created_at, updated_at FROM "user" WHERE "id" = $1
`

type GetUserByIdRow struct {
	Email     string           `json:"email"`
	FirstName string           `json:"first_name"`
	LastName  string           `json:"last_name"`
	Avatar    pgtype.Text      `json:"avatar"`
	Role      Roles            `json:"role"`
	IsActive  pgtype.Bool      `json:"is_active"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetUserById(ctx context.Context, id int32) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user" SET "email" = $1, "password" = $2, "first_name" = $3, "last_name" = $4, "avatar" = $5 WHERE "id" = $6 RETURNING email, first_name, last_name, avatar, role, is_active, created_at, updated_at
`

type UpdateUserParams struct {
	Email     string      `json:"email"`
	Password  string      `json:"password"`
	FirstName string      `json:"first_name"`
	LastName  string      `json:"last_name"`
	Avatar    pgtype.Text `json:"avatar"`
	ID        int32       `json:"id"`
}

type UpdateUserRow struct {
	Email     string           `json:"email"`
	FirstName string           `json:"first_name"`
	LastName  string           `json:"last_name"`
	Avatar    pgtype.Text      `json:"avatar"`
	Role      Roles            `json:"role"`
	IsActive  pgtype.Bool      `json:"is_active"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Avatar,
		arg.ID,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
